name: Test Suite

env:
  ACCEPTANCE_PATH: acceptance/go-cucumber-screenplay

on:
  # Run on push to main/master branches only
  push:
    branches: [ main, master ]

  # Run on pull requests to main/master
  pull_request:
    branches: [ main, master ]

  # Allow manual workflow runs
  workflow_dispatch:

jobs:
  # Fast tests that run on every push
  fast-tests:
    name: Fast Tests (Domain Only)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Cleanup Go cache
      run: rm -rf ~/go/pkg/mod ~/.cache/go-build || true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download backend dependencies
      run: cd back-end && go mod download

    - name: Download acceptance test dependencies
      run: cd ${{ env.ACCEPTANCE_PATH }} && go mod download

    - name: Run domain tests
      run: cd ${{ env.ACCEPTANCE_PATH }} && make test-domain

    - name: Run go vet
      run: make vet

  # HTTP and UI tests (runs on PR and main branch pushes)
  http-and-ui-tests:
    name: HTTP and UI Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    needs: fast-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Cleanup Go cache
      run: rm -rf ~/go/pkg/mod ~/.cache/go-build || true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Download backend dependencies
      run: cd back-end && go mod download

    - name: Download acceptance test dependencies
      run: cd ${{ env.ACCEPTANCE_PATH }} && go mod download

    - name: Run domain tests
      run: cd ${{ env.ACCEPTANCE_PATH }} && make test-domain

    - name: Run HTTP tests
      run: cd ${{ env.ACCEPTANCE_PATH }} && make test-http

    - name: Generate test coverage
      run: cd ${{ env.ACCEPTANCE_PATH }} && make coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ${{ env.ACCEPTANCE_PATH }}/coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Security and quality checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l back-end acceptance | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Please run 'make fmt'"
          gofmt -s -l back-end acceptance
          exit 1
        fi

    - name: Run go vet
      run: make vet

    # Temporarily commented out - these tools report errors that need investigation
    # TODO: Re-enable once issue is resolved (see https://github.com/sirockin/cucumber-screenplay-go/issues/4)
    # - name: Run staticcheck
    #   uses: dominikh/staticcheck-action@v1.3.1
    #   with:
    #     version: "2024.1.1"
    # - name: Run gosec security scanner
    #   uses: securego/gosec@master
    #   with:
    #     args: './...'

  # Build verification
  build-check:
    name: Build Verification
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Cleanup Go cache
      run: rm -rf ~/go/pkg/mod ~/.cache/go-build || true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download backend dependencies
      run: cd back-end && go mod download

    - name: Download acceptance test dependencies
      run: cd ${{ env.ACCEPTANCE_PATH }} && go mod download

    - name: Build server binary
      run: cd back-end && make build

    - name: Verify binary works
      run: |
        timeout 10s ./back-end/bin/server -port=9999 &
        sleep 2
        curl -f http://localhost:9999/accounts || true
        pkill -f "./back-end/bin/server" || true

    - name: Build Docker image
      run: docker build -f back-end/Dockerfile -t test-image back-end

    - name: Test Docker image
      run: |
        docker run -d -p 8081:8080 --name test-container test-image
        sleep 5
        curl -f http://localhost:8081/accounts || true
        docker stop test-container
        docker rm test-container